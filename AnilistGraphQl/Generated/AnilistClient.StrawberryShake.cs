// <auto-generated/>
#nullable enable

namespace AnilistClient.Graphql
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAnimeByNameResult : global::System.IEquatable<GetAnimeByNameResult>, IGetAnimeByNameResult
    {
        public GetAnimeByNameResult(global::AnilistClient.Graphql.IGetAnimeByName_Media? media)
        {
            Media = media;
        }

        /// <summary>
        /// Media query
        /// </summary>
        public global::AnilistClient.Graphql.IGetAnimeByName_Media? Media { get; }

        public virtual global::System.Boolean Equals(GetAnimeByNameResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Media is null && other.Media is null) || Media != null && Media.Equals(other.Media)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAnimeByNameResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Media != null)
                {
                    hash ^= 397 * Media.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Anime or Manga
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAnimeByName_Media_Media : global::System.IEquatable<GetAnimeByName_Media_Media>, IGetAnimeByName_Media_Media
    {
        public GetAnimeByName_Media_Media(global::AnilistClient.Graphql.IGetAnimeByName_Media_Title? title, global::AnilistClient.Graphql.MediaType? type)
        {
            Title = title;
            Type = type;
        }

        /// <summary>
        /// The official titles of the media in various languages
        /// </summary>
        public global::AnilistClient.Graphql.IGetAnimeByName_Media_Title? Title { get; }

        /// <summary>
        /// The type of the media; anime or manga
        /// </summary>
        public global::AnilistClient.Graphql.MediaType? Type { get; }

        public virtual global::System.Boolean Equals(GetAnimeByName_Media_Media? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title))) && ((Type is null && other.Type is null) || Type != null && Type.Equals(other.Type));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAnimeByName_Media_Media)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                if (Type != null)
                {
                    hash ^= 397 * Type.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The official titles of the media in various languages
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAnimeByName_Media_Title_MediaTitle : global::System.IEquatable<GetAnimeByName_Media_Title_MediaTitle>, IGetAnimeByName_Media_Title_MediaTitle
    {
        public GetAnimeByName_Media_Title_MediaTitle(global::System.String? romaji, global::System.String? english, global::System.String? native, global::System.String? userPreferred)
        {
            Romaji = romaji;
            English = english;
            Native = native;
            UserPreferred = userPreferred;
        }

        /// <summary>
        /// The romanization of the native language title
        /// </summary>
        public global::System.String? Romaji { get; }

        /// <summary>
        /// The official english title
        /// </summary>
        public global::System.String? English { get; }

        /// <summary>
        /// Official title in it's native language
        /// </summary>
        public global::System.String? Native { get; }

        /// <summary>
        /// The currently authenticated users preferred title language. Default romaji for non-authenticated
        /// </summary>
        public global::System.String? UserPreferred { get; }

        public virtual global::System.Boolean Equals(GetAnimeByName_Media_Title_MediaTitle? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Romaji is null && other.Romaji is null) || Romaji != null && Romaji.Equals(other.Romaji))) && ((English is null && other.English is null) || English != null && English.Equals(other.English)) && ((Native is null && other.Native is null) || Native != null && Native.Equals(other.Native)) && ((UserPreferred is null && other.UserPreferred is null) || UserPreferred != null && UserPreferred.Equals(other.UserPreferred));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAnimeByName_Media_Title_MediaTitle)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Romaji != null)
                {
                    hash ^= 397 * Romaji.GetHashCode();
                }

                if (English != null)
                {
                    hash ^= 397 * English.GetHashCode();
                }

                if (Native != null)
                {
                    hash ^= 397 * Native.GetHashCode();
                }

                if (UserPreferred != null)
                {
                    hash ^= 397 * UserPreferred.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAnimeByNameResult
    {
        /// <summary>
        /// Media query
        /// </summary>
        public global::AnilistClient.Graphql.IGetAnimeByName_Media? Media { get; }
    }

    /// <summary>
    /// Anime or Manga
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAnimeByName_Media
    {
        /// <summary>
        /// The official titles of the media in various languages
        /// </summary>
        public global::AnilistClient.Graphql.IGetAnimeByName_Media_Title? Title { get; }

        /// <summary>
        /// The type of the media; anime or manga
        /// </summary>
        public global::AnilistClient.Graphql.MediaType? Type { get; }
    }

    /// <summary>
    /// Anime or Manga
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAnimeByName_Media_Media : IGetAnimeByName_Media
    {
    }

    /// <summary>
    /// The official titles of the media in various languages
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAnimeByName_Media_Title
    {
        /// <summary>
        /// The romanization of the native language title
        /// </summary>
        public global::System.String? Romaji { get; }

        /// <summary>
        /// The official english title
        /// </summary>
        public global::System.String? English { get; }

        /// <summary>
        /// Official title in it's native language
        /// </summary>
        public global::System.String? Native { get; }

        /// <summary>
        /// The currently authenticated users preferred title language. Default romaji for non-authenticated
        /// </summary>
        public global::System.String? UserPreferred { get; }
    }

    /// <summary>
    /// The official titles of the media in various languages
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAnimeByName_Media_Title_MediaTitle : IGetAnimeByName_Media_Title
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetMangaByNameResult : global::System.IEquatable<GetMangaByNameResult>, IGetMangaByNameResult
    {
        public GetMangaByNameResult(global::AnilistClient.Graphql.IGetMangaByName_Media? media)
        {
            Media = media;
        }

        /// <summary>
        /// Media query
        /// </summary>
        public global::AnilistClient.Graphql.IGetMangaByName_Media? Media { get; }

        public virtual global::System.Boolean Equals(GetMangaByNameResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Media is null && other.Media is null) || Media != null && Media.Equals(other.Media)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMangaByNameResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Media != null)
                {
                    hash ^= 397 * Media.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Anime or Manga
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetMangaByName_Media_Media : global::System.IEquatable<GetMangaByName_Media_Media>, IGetMangaByName_Media_Media
    {
        public GetMangaByName_Media_Media(global::AnilistClient.Graphql.IGetMangaByName_Media_Title? title, global::AnilistClient.Graphql.MediaType? type)
        {
            Title = title;
            Type = type;
        }

        /// <summary>
        /// The official titles of the media in various languages
        /// </summary>
        public global::AnilistClient.Graphql.IGetMangaByName_Media_Title? Title { get; }

        /// <summary>
        /// The type of the media; anime or manga
        /// </summary>
        public global::AnilistClient.Graphql.MediaType? Type { get; }

        public virtual global::System.Boolean Equals(GetMangaByName_Media_Media? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title))) && ((Type is null && other.Type is null) || Type != null && Type.Equals(other.Type));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMangaByName_Media_Media)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                if (Type != null)
                {
                    hash ^= 397 * Type.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The official titles of the media in various languages
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetMangaByName_Media_Title_MediaTitle : global::System.IEquatable<GetMangaByName_Media_Title_MediaTitle>, IGetMangaByName_Media_Title_MediaTitle
    {
        public GetMangaByName_Media_Title_MediaTitle(global::System.String? romaji, global::System.String? english, global::System.String? native, global::System.String? userPreferred)
        {
            Romaji = romaji;
            English = english;
            Native = native;
            UserPreferred = userPreferred;
        }

        /// <summary>
        /// The romanization of the native language title
        /// </summary>
        public global::System.String? Romaji { get; }

        /// <summary>
        /// The official english title
        /// </summary>
        public global::System.String? English { get; }

        /// <summary>
        /// Official title in it's native language
        /// </summary>
        public global::System.String? Native { get; }

        /// <summary>
        /// The currently authenticated users preferred title language. Default romaji for non-authenticated
        /// </summary>
        public global::System.String? UserPreferred { get; }

        public virtual global::System.Boolean Equals(GetMangaByName_Media_Title_MediaTitle? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Romaji is null && other.Romaji is null) || Romaji != null && Romaji.Equals(other.Romaji))) && ((English is null && other.English is null) || English != null && English.Equals(other.English)) && ((Native is null && other.Native is null) || Native != null && Native.Equals(other.Native)) && ((UserPreferred is null && other.UserPreferred is null) || UserPreferred != null && UserPreferred.Equals(other.UserPreferred));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMangaByName_Media_Title_MediaTitle)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Romaji != null)
                {
                    hash ^= 397 * Romaji.GetHashCode();
                }

                if (English != null)
                {
                    hash ^= 397 * English.GetHashCode();
                }

                if (Native != null)
                {
                    hash ^= 397 * Native.GetHashCode();
                }

                if (UserPreferred != null)
                {
                    hash ^= 397 * UserPreferred.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetMangaByNameResult
    {
        /// <summary>
        /// Media query
        /// </summary>
        public global::AnilistClient.Graphql.IGetMangaByName_Media? Media { get; }
    }

    /// <summary>
    /// Anime or Manga
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetMangaByName_Media
    {
        /// <summary>
        /// The official titles of the media in various languages
        /// </summary>
        public global::AnilistClient.Graphql.IGetMangaByName_Media_Title? Title { get; }

        /// <summary>
        /// The type of the media; anime or manga
        /// </summary>
        public global::AnilistClient.Graphql.MediaType? Type { get; }
    }

    /// <summary>
    /// Anime or Manga
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetMangaByName_Media_Media : IGetMangaByName_Media
    {
    }

    /// <summary>
    /// The official titles of the media in various languages
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetMangaByName_Media_Title
    {
        /// <summary>
        /// The romanization of the native language title
        /// </summary>
        public global::System.String? Romaji { get; }

        /// <summary>
        /// The official english title
        /// </summary>
        public global::System.String? English { get; }

        /// <summary>
        /// Official title in it's native language
        /// </summary>
        public global::System.String? Native { get; }

        /// <summary>
        /// The currently authenticated users preferred title language. Default romaji for non-authenticated
        /// </summary>
        public global::System.String? UserPreferred { get; }
    }

    /// <summary>
    /// The official titles of the media in various languages
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetMangaByName_Media_Title_MediaTitle : IGetMangaByName_Media_Title
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetUserIdResult : global::System.IEquatable<GetUserIdResult>, IGetUserIdResult
    {
        public GetUserIdResult(global::AnilistClient.Graphql.IGetUserId_User? user)
        {
            User = user;
        }

        /// <summary>
        /// User query
        /// </summary>
        public global::AnilistClient.Graphql.IGetUserId_User? User { get; }

        public virtual global::System.Boolean Equals(GetUserIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((User is null && other.User is null) || User != null && User.Equals(other.User)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUserIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (User != null)
                {
                    hash ^= 397 * User.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetUserId_User_User : global::System.IEquatable<GetUserId_User_User>, IGetUserId_User_User
    {
        public GetUserId_User_User(global::System.Int32 id)
        {
            Id = id;
        }

        /// <summary>
        /// The id of the user
        /// </summary>
        public global::System.Int32 Id { get; }

        public virtual global::System.Boolean Equals(GetUserId_User_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUserId_User_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetUserIdResult
    {
        /// <summary>
        /// User query
        /// </summary>
        public global::AnilistClient.Graphql.IGetUserId_User? User { get; }
    }

    /// <summary>
    /// A user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetUserId_User
    {
        /// <summary>
        /// The id of the user
        /// </summary>
        public global::System.Int32 Id { get; }
    }

    /// <summary>
    /// A user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetUserId_User_User : IGetUserId_User
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public enum MediaType
    {
        /// <summary>
        /// Japanese Anime
        /// </summary>
        Anime,
        /// <summary>
        /// Asian comic
        /// </summary>
        Manga
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class MediaTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, MediaType>
    {
        public global::System.String TypeName => "MediaType";
        public MediaType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "ANIME" => MediaType.Anime,
                "MANGA" => MediaType.Manga,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                MediaType.Anime => "ANIME",
                MediaType.Manga => "MANGA",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAnimeByName GraphQL operation
    /// <code>
    /// query GetAnimeByName($name: String) {
    ///   Media(search: $name, type: ANIME) {
    ///     __typename
    ///     title {
    ///       __typename
    ///       romaji
    ///       english
    ///       native
    ///       userPreferred
    ///     }
    ///     type
    ///     ... on Media {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAnimeByNameQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAnimeByNameQueryDocument()
        {
        }

        public static GetAnimeByNameQueryDocument Instance { get; } = new GetAnimeByNameQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x28, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x28, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x41, 0x4e, 0x49, 0x4d, 0x45, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x6f, 0x6d, 0x61, 0x6a, 0x69, 0x20, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x7d, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "e17215d315a09f5ac254ac9baeacdb1c");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAnimeByName GraphQL operation
    /// <code>
    /// query GetAnimeByName($name: String) {
    ///   Media(search: $name, type: ANIME) {
    ///     __typename
    ///     title {
    ///       __typename
    ///       romaji
    ///       english
    ///       native
    ///       userPreferred
    ///     }
    ///     type
    ///     ... on Media {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAnimeByNameQuery : global::AnilistClient.Graphql.IGetAnimeByNameQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAnimeByNameResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetAnimeByNameQuery(global::StrawberryShake.IOperationExecutor<IGetAnimeByNameResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAnimeByNameResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAnimeByNameResult>> ExecuteAsync(global::System.String? name, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(name);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAnimeByNameResult>> Watch(global::System.String? name, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(name);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? name)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("name", FormatName(name));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAnimeByNameQueryDocument.Instance.Hash.Value, name: "GetAnimeByName", document: GetAnimeByNameQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatName(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAnimeByName GraphQL operation
    /// <code>
    /// query GetAnimeByName($name: String) {
    ///   Media(search: $name, type: ANIME) {
    ///     __typename
    ///     title {
    ///       __typename
    ///       romaji
    ///       english
    ///       native
    ///       userPreferred
    ///     }
    ///     type
    ///     ... on Media {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAnimeByNameQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAnimeByNameResult>> ExecuteAsync(global::System.String? name, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAnimeByNameResult>> Watch(global::System.String? name, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetMangaByName GraphQL operation
    /// <code>
    /// query GetMangaByName($name: String) {
    ///   Media(search: $name, type: MANGA) {
    ///     __typename
    ///     title {
    ///       __typename
    ///       romaji
    ///       english
    ///       native
    ///       userPreferred
    ///     }
    ///     type
    ///     ... on Media {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetMangaByNameQueryDocument : global::StrawberryShake.IDocument
    {
        private GetMangaByNameQueryDocument()
        {
        }

        public static GetMangaByNameQueryDocument Instance { get; } = new GetMangaByNameQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x28, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x28, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x4d, 0x41, 0x4e, 0x47, 0x41, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x6f, 0x6d, 0x61, 0x6a, 0x69, 0x20, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x7d, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "3cb17f7bdf7ddf084360ab865f03e9b5");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetMangaByName GraphQL operation
    /// <code>
    /// query GetMangaByName($name: String) {
    ///   Media(search: $name, type: MANGA) {
    ///     __typename
    ///     title {
    ///       __typename
    ///       romaji
    ///       english
    ///       native
    ///       userPreferred
    ///     }
    ///     type
    ///     ... on Media {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetMangaByNameQuery : global::AnilistClient.Graphql.IGetMangaByNameQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetMangaByNameResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetMangaByNameQuery(global::StrawberryShake.IOperationExecutor<IGetMangaByNameResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetMangaByNameResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMangaByNameResult>> ExecuteAsync(global::System.String? name, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(name);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMangaByNameResult>> Watch(global::System.String? name, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(name);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? name)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("name", FormatName(name));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetMangaByNameQueryDocument.Instance.Hash.Value, name: "GetMangaByName", document: GetMangaByNameQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatName(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetMangaByName GraphQL operation
    /// <code>
    /// query GetMangaByName($name: String) {
    ///   Media(search: $name, type: MANGA) {
    ///     __typename
    ///     title {
    ///       __typename
    ///       romaji
    ///       english
    ///       native
    ///       userPreferred
    ///     }
    ///     type
    ///     ... on Media {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetMangaByNameQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMangaByNameResult>> ExecuteAsync(global::System.String? name, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMangaByNameResult>> Watch(global::System.String? name, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetUserId GraphQL operation
    /// <code>
    /// query GetUserId($name: String) {
    ///   User(name: $name) {
    ///     __typename
    ///     id
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetUserIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetUserIdQueryDocument()
        {
        }

        public static GetUserIdQueryDocument Instance { get; } = new GetUserIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x28, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x55, 0x73, 0x65, 0x72, 0x28, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "38119e732e2e8e122692b7931a5a3f93");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUserId GraphQL operation
    /// <code>
    /// query GetUserId($name: String) {
    ///   User(name: $name) {
    ///     __typename
    ///     id
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetUserIdQuery : global::AnilistClient.Graphql.IGetUserIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetUserIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetUserIdQuery(global::StrawberryShake.IOperationExecutor<IGetUserIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetUserIdResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUserIdResult>> ExecuteAsync(global::System.String? name, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(name);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUserIdResult>> Watch(global::System.String? name, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(name);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? name)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("name", FormatName(name));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetUserIdQueryDocument.Instance.Hash.Value, name: "GetUserId", document: GetUserIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatName(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUserId GraphQL operation
    /// <code>
    /// query GetUserId($name: String) {
    ///   User(name: $name) {
    ///     __typename
    ///     id
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetUserIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUserIdResult>> ExecuteAsync(global::System.String? name, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUserIdResult>> Watch(global::System.String? name, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the AnilistClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AnilistClient : global::AnilistClient.Graphql.IAnilistClient
    {
        private readonly global::AnilistClient.Graphql.IGetAnimeByNameQuery _getAnimeByName;
        private readonly global::AnilistClient.Graphql.IGetMangaByNameQuery _getMangaByName;
        private readonly global::AnilistClient.Graphql.IGetUserIdQuery _getUserId;
        public AnilistClient(global::AnilistClient.Graphql.IGetAnimeByNameQuery getAnimeByName, global::AnilistClient.Graphql.IGetMangaByNameQuery getMangaByName, global::AnilistClient.Graphql.IGetUserIdQuery getUserId)
        {
            _getAnimeByName = getAnimeByName ?? throw new global::System.ArgumentNullException(nameof(getAnimeByName));
            _getMangaByName = getMangaByName ?? throw new global::System.ArgumentNullException(nameof(getMangaByName));
            _getUserId = getUserId ?? throw new global::System.ArgumentNullException(nameof(getUserId));
        }

        public static global::System.String ClientName => "AnilistClient";
        public global::AnilistClient.Graphql.IGetAnimeByNameQuery GetAnimeByName => _getAnimeByName;
        public global::AnilistClient.Graphql.IGetMangaByNameQuery GetMangaByName => _getMangaByName;
        public global::AnilistClient.Graphql.IGetUserIdQuery GetUserId => _getUserId;
    }

    /// <summary>
    /// Represents the AnilistClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAnilistClient
    {
        global::AnilistClient.Graphql.IGetAnimeByNameQuery GetAnimeByName { get; }

        global::AnilistClient.Graphql.IGetMangaByNameQuery GetMangaByName { get; }

        global::AnilistClient.Graphql.IGetUserIdQuery GetUserId { get; }
    }
}

namespace AnilistClient.Graphql.State
{
    ///<summary>Anime or Manga</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class MediaEntity
    {
        public MediaEntity(global::AnilistClient.Graphql.State.MediaTitleData? title = default !, global::AnilistClient.Graphql.MediaType? type = default !)
        {
            Title = title;
            Type = type;
        }

        ///<summary>The official titles of the media in various languages</summary>
        public global::AnilistClient.Graphql.State.MediaTitleData? Title { get; }

        ///<summary>The type of the media; anime or manga</summary>
        public global::AnilistClient.Graphql.MediaType? Type { get; }
    }

    ///<summary>A user</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class UserEntity
    {
        public UserEntity(global::System.Int32 id = default !)
        {
            Id = id;
        }

        ///<summary>The id of the user</summary>
        public global::System.Int32 Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAnimeByNameResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AnilistClient.Graphql.GetAnimeByNameResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AnilistClient.Graphql.State.MediaEntity, GetAnimeByName_Media_Media> _getAnimeByName_Media_MediaFromMediaEntityMapper;
        public GetAnimeByNameResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AnilistClient.Graphql.State.MediaEntity, GetAnimeByName_Media_Media> getAnimeByName_Media_MediaFromMediaEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getAnimeByName_Media_MediaFromMediaEntityMapper = getAnimeByName_Media_MediaFromMediaEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getAnimeByName_Media_MediaFromMediaEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AnilistClient.Graphql.IGetAnimeByNameResult);
        public GetAnimeByNameResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetAnimeByNameResultInfo info)
            {
                return new GetAnimeByNameResult(MapIGetAnimeByName_Media(info.Media, snapshot));
            }

            throw new global::System.ArgumentException("GetAnimeByNameResultInfo expected.");
        }

        private global::AnilistClient.Graphql.IGetAnimeByName_Media? MapIGetAnimeByName_Media(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Media", global::System.StringComparison.Ordinal))
            {
                return _getAnimeByName_Media_MediaFromMediaEntityMapper.Map(snapshot.GetEntity<global::AnilistClient.Graphql.State.MediaEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAnimeByNameResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetAnimeByNameResultInfo(global::StrawberryShake.EntityId? media, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Media = media;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Media query
        /// </summary>
        public global::StrawberryShake.EntityId? Media { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAnimeByNameResultInfo(Media, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAnimeByName_Media_MediaFromMediaEntityMapper : global::StrawberryShake.IEntityMapper<global::AnilistClient.Graphql.State.MediaEntity, GetAnimeByName_Media_Media>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetAnimeByName_Media_MediaFromMediaEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetAnimeByName_Media_Media Map(global::AnilistClient.Graphql.State.MediaEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetAnimeByName_Media_Media(MapIGetAnimeByName_Media_Title(entity.Title, snapshot), entity.Type);
        }

        private global::AnilistClient.Graphql.IGetAnimeByName_Media_Title? MapIGetAnimeByName_Media_Title(global::AnilistClient.Graphql.State.MediaTitleData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAnimeByName_Media_Title returnValue = default !;
            if (data?.__typename.Equals("MediaTitle", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAnimeByName_Media_Title_MediaTitle(data.Romaji, data.English, data.Native, data.UserPreferred);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetMangaByNameResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AnilistClient.Graphql.GetMangaByNameResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AnilistClient.Graphql.State.MediaEntity, GetMangaByName_Media_Media> _getMangaByName_Media_MediaFromMediaEntityMapper;
        public GetMangaByNameResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AnilistClient.Graphql.State.MediaEntity, GetMangaByName_Media_Media> getMangaByName_Media_MediaFromMediaEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getMangaByName_Media_MediaFromMediaEntityMapper = getMangaByName_Media_MediaFromMediaEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMangaByName_Media_MediaFromMediaEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AnilistClient.Graphql.IGetMangaByNameResult);
        public GetMangaByNameResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetMangaByNameResultInfo info)
            {
                return new GetMangaByNameResult(MapIGetMangaByName_Media(info.Media, snapshot));
            }

            throw new global::System.ArgumentException("GetMangaByNameResultInfo expected.");
        }

        private global::AnilistClient.Graphql.IGetMangaByName_Media? MapIGetMangaByName_Media(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Media", global::System.StringComparison.Ordinal))
            {
                return _getMangaByName_Media_MediaFromMediaEntityMapper.Map(snapshot.GetEntity<global::AnilistClient.Graphql.State.MediaEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetMangaByNameResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetMangaByNameResultInfo(global::StrawberryShake.EntityId? media, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Media = media;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Media query
        /// </summary>
        public global::StrawberryShake.EntityId? Media { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetMangaByNameResultInfo(Media, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetMangaByName_Media_MediaFromMediaEntityMapper : global::StrawberryShake.IEntityMapper<global::AnilistClient.Graphql.State.MediaEntity, GetMangaByName_Media_Media>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMangaByName_Media_MediaFromMediaEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMangaByName_Media_Media Map(global::AnilistClient.Graphql.State.MediaEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMangaByName_Media_Media(MapIGetMangaByName_Media_Title(entity.Title, snapshot), entity.Type);
        }

        private global::AnilistClient.Graphql.IGetMangaByName_Media_Title? MapIGetMangaByName_Media_Title(global::AnilistClient.Graphql.State.MediaTitleData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetMangaByName_Media_Title returnValue = default !;
            if (data?.__typename.Equals("MediaTitle", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetMangaByName_Media_Title_MediaTitle(data.Romaji, data.English, data.Native, data.UserPreferred);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetUserIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AnilistClient.Graphql.GetUserIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AnilistClient.Graphql.State.UserEntity, GetUserId_User_User> _getUserId_User_UserFromUserEntityMapper;
        public GetUserIdResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AnilistClient.Graphql.State.UserEntity, GetUserId_User_User> getUserId_User_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getUserId_User_UserFromUserEntityMapper = getUserId_User_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getUserId_User_UserFromUserEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AnilistClient.Graphql.IGetUserIdResult);
        public GetUserIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetUserIdResultInfo info)
            {
                return new GetUserIdResult(MapIGetUserId_User(info.User, snapshot));
            }

            throw new global::System.ArgumentException("GetUserIdResultInfo expected.");
        }

        private global::AnilistClient.Graphql.IGetUserId_User? MapIGetUserId_User(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getUserId_User_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::AnilistClient.Graphql.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetUserIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetUserIdResultInfo(global::StrawberryShake.EntityId? user, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            User = user;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// User query
        /// </summary>
        public global::StrawberryShake.EntityId? User { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetUserIdResultInfo(User, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetUserId_User_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::AnilistClient.Graphql.State.UserEntity, GetUserId_User_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetUserId_User_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetUserId_User_User Map(global::AnilistClient.Graphql.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetUserId_User_User(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAnimeByNameBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AnilistClient.Graphql.IGetAnimeByNameResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AnilistClient.Graphql.IGetAnimeByNameResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::AnilistClient.Graphql.MediaType> _mediaTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetAnimeByNameBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AnilistClient.Graphql.IGetAnimeByNameResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _mediaTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::AnilistClient.Graphql.MediaType>("MediaType") ?? throw new global::System.ArgumentException("No serializer for type `MediaType` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetAnimeByNameResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetAnimeByNameResult Result, GetAnimeByNameResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetAnimeByNameResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetAnimeByNameResult, GetAnimeByNameResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? mediaId = default !;
            _entityStore.Update(session =>
            {
                mediaId = UpdateIGetAnimeByName_MediaEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Media"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetAnimeByNameResultInfo(mediaId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetAnimeByName_MediaEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Media", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AnilistClient.Graphql.State.MediaEntity? entity))
                {
                    session.SetEntity(entityId, new global::AnilistClient.Graphql.State.MediaEntity(DeserializeIGetAnimeByName_Media_Title(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeMediaType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AnilistClient.Graphql.State.MediaEntity(DeserializeIGetAnimeByName_Media_Title(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeMediaType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::AnilistClient.Graphql.State.MediaTitleData? DeserializeIGetAnimeByName_Media_Title(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("MediaTitle", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AnilistClient.Graphql.State.MediaTitleData(typename, romaji: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "romaji")), english: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "english")), native: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "native")), userPreferred: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userPreferred")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::AnilistClient.Graphql.MediaType? DeserializeMediaType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _mediaTypeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetMangaByNameBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AnilistClient.Graphql.IGetMangaByNameResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AnilistClient.Graphql.IGetMangaByNameResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::AnilistClient.Graphql.MediaType> _mediaTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetMangaByNameBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AnilistClient.Graphql.IGetMangaByNameResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _mediaTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::AnilistClient.Graphql.MediaType>("MediaType") ?? throw new global::System.ArgumentException("No serializer for type `MediaType` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetMangaByNameResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetMangaByNameResult Result, GetMangaByNameResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetMangaByNameResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetMangaByNameResult, GetMangaByNameResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? mediaId = default !;
            _entityStore.Update(session =>
            {
                mediaId = UpdateIGetMangaByName_MediaEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Media"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetMangaByNameResultInfo(mediaId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetMangaByName_MediaEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Media", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AnilistClient.Graphql.State.MediaEntity? entity))
                {
                    session.SetEntity(entityId, new global::AnilistClient.Graphql.State.MediaEntity(DeserializeIGetMangaByName_Media_Title(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeMediaType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AnilistClient.Graphql.State.MediaEntity(DeserializeIGetMangaByName_Media_Title(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), DeserializeMediaType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::AnilistClient.Graphql.State.MediaTitleData? DeserializeIGetMangaByName_Media_Title(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("MediaTitle", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AnilistClient.Graphql.State.MediaTitleData(typename, romaji: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "romaji")), english: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "english")), native: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "native")), userPreferred: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userPreferred")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::AnilistClient.Graphql.MediaType? DeserializeMediaType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _mediaTypeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetUserIdBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AnilistClient.Graphql.IGetUserIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AnilistClient.Graphql.IGetUserIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetUserIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AnilistClient.Graphql.IGetUserIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetUserIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetUserIdResult Result, GetUserIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetUserIdResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetUserIdResult, GetUserIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? userId = default !;
            _entityStore.Update(session =>
            {
                userId = UpdateIGetUserId_UserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "User"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetUserIdResultInfo(userId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetUserId_UserEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AnilistClient.Graphql.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::AnilistClient.Graphql.State.UserEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AnilistClient.Graphql.State.UserEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    ///<summary>The official titles of the media in various languages</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class MediaTitleData
    {
        public MediaTitleData(global::System.String __typename, global::System.String? romaji = default !, global::System.String? english = default !, global::System.String? native = default !, global::System.String? userPreferred = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Romaji = romaji;
            English = english;
            Native = native;
            UserPreferred = userPreferred;
        }

        public global::System.String __typename { get; }

        ///<summary>The romanization of the native language title</summary>
        public global::System.String? Romaji { get; }

        ///<summary>The official english title</summary>
        public global::System.String? English { get; }

        ///<summary>Official title in it's native language</summary>
        public global::System.String? Native { get; }

        ///<summary>The currently authenticated users preferred title language. Default romaji for non-authenticated</summary>
        public global::System.String? UserPreferred { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AnilistClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Media" => ParseMediaEntityId(obj, __typename),
                "User" => ParseUserEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Media" => FormatMediaEntityId(entityId),
                "User" => FormatUserEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseMediaEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatMediaEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUserEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatUserEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AnilistClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public AnilistClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public static partial class AnilistClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::AnilistClient.Graphql.State.AnilistClientStoreAccessor> AddAnilistClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::AnilistClient.Graphql.State.AnilistClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AnilistClient.Graphql.GetAnimeByNameQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AnilistClient.Graphql.GetMangaByNameQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AnilistClient.Graphql.GetUserIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AnilistClient.Graphql.AnilistClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AnilistClient.Graphql.IAnilistClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::AnilistClient.Graphql.State.AnilistClientStoreAccessor>("AnilistClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("AnilistClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AnilistClient.Graphql.State.MediaEntity, global::AnilistClient.Graphql.GetAnimeByName_Media_Media>, global::AnilistClient.Graphql.State.GetAnimeByName_Media_MediaFromMediaEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AnilistClient.Graphql.State.MediaEntity, global::AnilistClient.Graphql.GetMangaByName_Media_Media>, global::AnilistClient.Graphql.State.GetMangaByName_Media_MediaFromMediaEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AnilistClient.Graphql.State.UserEntity, global::AnilistClient.Graphql.GetUserId_User_User>, global::AnilistClient.Graphql.State.GetUserId_User_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AnilistClient.Graphql.MediaTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AnilistClient.Graphql.IGetAnimeByNameResult>, global::AnilistClient.Graphql.State.GetAnimeByNameResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AnilistClient.Graphql.IGetAnimeByNameResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AnilistClient.Graphql.IGetAnimeByNameQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AnilistClient.Graphql.IGetAnimeByNameResult>, global::AnilistClient.Graphql.State.GetAnimeByNameBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AnilistClient.Graphql.IGetAnimeByNameResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AnilistClient.Graphql.IGetAnimeByNameResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AnilistClient.Graphql.IGetAnimeByNameResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AnilistClient.Graphql.GetAnimeByNameQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AnilistClient.Graphql.IGetAnimeByNameQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AnilistClient.Graphql.GetAnimeByNameQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AnilistClient.Graphql.IGetMangaByNameResult>, global::AnilistClient.Graphql.State.GetMangaByNameResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AnilistClient.Graphql.IGetMangaByNameResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AnilistClient.Graphql.IGetMangaByNameQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AnilistClient.Graphql.IGetMangaByNameResult>, global::AnilistClient.Graphql.State.GetMangaByNameBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AnilistClient.Graphql.IGetMangaByNameResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AnilistClient.Graphql.IGetMangaByNameResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AnilistClient.Graphql.IGetMangaByNameResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AnilistClient.Graphql.GetMangaByNameQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AnilistClient.Graphql.IGetMangaByNameQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AnilistClient.Graphql.GetMangaByNameQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AnilistClient.Graphql.IGetUserIdResult>, global::AnilistClient.Graphql.State.GetUserIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AnilistClient.Graphql.IGetUserIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AnilistClient.Graphql.IGetUserIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AnilistClient.Graphql.IGetUserIdResult>, global::AnilistClient.Graphql.State.GetUserIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AnilistClient.Graphql.IGetUserIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AnilistClient.Graphql.IGetUserIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AnilistClient.Graphql.IGetUserIdResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AnilistClient.Graphql.GetUserIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AnilistClient.Graphql.IGetUserIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AnilistClient.Graphql.GetUserIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::AnilistClient.Graphql.State.AnilistClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AnilistClient.Graphql.AnilistClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AnilistClient.Graphql.IAnilistClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AnilistClient.Graphql.AnilistClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
