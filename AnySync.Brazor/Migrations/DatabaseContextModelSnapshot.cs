// <auto-generated />
using System;
using System.Collections.Generic;
using AnySync.Brazor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AnySync.Brazor.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnySync.Brazor.Data.DatabaseModels.AnimeEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("AlternativesTitles")
                        .HasColumnType("text[]")
                        .HasColumnName("alternatives_titles");

                    b.Property<int>("AnilistId")
                        .HasColumnType("integer")
                        .HasColumnName("anilist_id");

                    b.Property<string>("AnilistLink")
                        .HasColumnType("text")
                        .HasColumnName("anilist_link");

                    b.Property<string>("CanonicalTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("canonical_title");

                    b.Property<int>("EpisodeCount")
                        .HasColumnType("integer")
                        .HasColumnName("episode_count");

                    b.Property<DateTimeOffset>("FinishDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finish_date");

                    b.Property<string>("ImageURL")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int>("KitsuId")
                        .HasColumnType("integer")
                        .HasColumnName("kitsu_id");

                    b.Property<string>("KitsuLink")
                        .HasColumnType("text")
                        .HasColumnName("kitsu_link");

                    b.Property<int?>("LibraryId")
                        .HasColumnType("integer")
                        .HasColumnName("library_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("Progress")
                        .HasColumnType("integer")
                        .HasColumnName("progress");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean")
                        .HasColumnName("public");

                    b.Property<int>("RewatchCount")
                        .HasColumnType("integer")
                        .HasColumnName("rewatch_count");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.HasKey("Id")
                        .HasName("pk_animes_entries");

                    b.HasIndex("LibraryId")
                        .HasDatabaseName("ix_animes_entries_library_id");

                    b.ToTable("animes_entries", (string)null);
                });

            modelBuilder.Entity("AnySync.Brazor.Data.DatabaseModels.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_library");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_library_user_id");

                    b.ToTable("library", (string)null);
                });

            modelBuilder.Entity("AnySync.Brazor.Data.DatabaseModels.MangaEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("AlternativesTitles")
                        .HasColumnType("text[]")
                        .HasColumnName("alternatives_titles");

                    b.Property<int>("AnilistId")
                        .HasColumnType("integer")
                        .HasColumnName("anilist_id");

                    b.Property<string>("AnilistLink")
                        .HasColumnType("text")
                        .HasColumnName("anilist_link");

                    b.Property<string>("CanonicalTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("canonical_title");

                    b.Property<int>("ChapterProgress")
                        .HasColumnType("integer")
                        .HasColumnName("chapter_progress");

                    b.Property<int>("EpisodeCount")
                        .HasColumnType("integer")
                        .HasColumnName("episode_count");

                    b.Property<DateTimeOffset>("FinishDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finish_date");

                    b.Property<string>("ImageURL")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int>("KitsuId")
                        .HasColumnType("integer")
                        .HasColumnName("kitsu_id");

                    b.Property<string>("KitsuLink")
                        .HasColumnType("text")
                        .HasColumnName("kitsu_link");

                    b.Property<int?>("LibraryId")
                        .HasColumnType("integer")
                        .HasColumnName("library_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean")
                        .HasColumnName("public");

                    b.Property<int>("RereadCount")
                        .HasColumnType("integer")
                        .HasColumnName("reread_count");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("VolumeProgress")
                        .HasColumnType("integer")
                        .HasColumnName("volume_progress");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.HasKey("Id")
                        .HasName("pk_mangas_entries");

                    b.HasIndex("LibraryId")
                        .HasDatabaseName("ix_mangas_entries_library_id");

                    b.ToTable("mangas_entries", (string)null);
                });

            modelBuilder.Entity("AnySync.Brazor.Data.DatabaseModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("KitsuUserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("kitsu_user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("AnySync.Brazor.Data.DatabaseModels.AnimeEntry", b =>
                {
                    b.HasOne("AnySync.Brazor.Data.DatabaseModels.Library", null)
                        .WithMany("AnimesEntries")
                        .HasForeignKey("LibraryId")
                        .HasConstraintName("fk_animes_entries_library_library_id");
                });

            modelBuilder.Entity("AnySync.Brazor.Data.DatabaseModels.Library", b =>
                {
                    b.HasOne("AnySync.Brazor.Data.DatabaseModels.User", null)
                        .WithOne("Library")
                        .HasForeignKey("AnySync.Brazor.Data.DatabaseModels.Library", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_library_users_user_id");
                });

            modelBuilder.Entity("AnySync.Brazor.Data.DatabaseModels.MangaEntry", b =>
                {
                    b.HasOne("AnySync.Brazor.Data.DatabaseModels.Library", null)
                        .WithMany("MangaEntries")
                        .HasForeignKey("LibraryId")
                        .HasConstraintName("fk_mangas_entries_library_library_id");
                });

            modelBuilder.Entity("AnySync.Brazor.Data.DatabaseModels.Library", b =>
                {
                    b.Navigation("AnimesEntries");

                    b.Navigation("MangaEntries");
                });

            modelBuilder.Entity("AnySync.Brazor.Data.DatabaseModels.User", b =>
                {
                    b.Navigation("Library")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
