@page "/kitsu"
@using AnySync.Brazor.Services
@inject KitsuService service

@using anisync.Models.Kitsu.StructuredModels
@using AnySync.Brazor.PagesDatas

<MudTextField @bind-Value="@kitsuUsername" Label="Kitsu Username" Variant="Variant.Outlined"
@oninput="UpdateKitsuUserName" Error="@_kitsuUsernameHasError"></MudTextField>
@if (_kitsuUsernameHasError)
{
    <MudAlert Severity="Severity.Error" Dense="true" Class="my-2">Kitsu Username is necessary.</MudAlert>
}

<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="LoadLibrary">Load Library
    </MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="Sync">Sync</MudButton>
</MudButtonGroup>


<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Anime">
        <MudTable Items="@animeEntries" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading"
            LoadingProgressColor="Color.Info" Filter="new Func<KitsuPageLibraryAnimeData, bool>(CallFilterAnime)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Anime</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="animeSearch" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Thumb</MudTh>
                <MudTh>Canonical Title</MudTh>
                <MudTh>Kitsu Link</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Thumb">
                    <MudImage Src="@context.Image" Width="64" Height="64" Alt="Mony the dog"
                        Elevation="25" Class="rounded-lg" />
                </MudTd>
                <MudTd DataLabel="Canonical Title">@context.CanonicalTitle</MudTd>
                <MudTd DataLabel="Kitsu Link">@context.KitsuLink</MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="Manga">
        <MudTable Items="@mangaEntries" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading"
            LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Thumb</MudTh>
                <MudTh>Canonical Title</MudTh>
                <MudTh>Kitsu Link</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Thumb">
                    <MudImage Src="@context.Image" Width="64" Height="64" Alt="Mony the dog"
                        Elevation="25" Class="rounded-lg" />
                </MudTd>
                <MudTd DataLabel="Canonical Title">@context.CanonicalTitle</MudTd>
                <MudTd DataLabel="Kitsu Link">@context.KitsuLink</MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
</MudTabs>

@code {

    public List<KitsuPageLibraryAnimeData>? animeEntries = new();
    public List<KitsuPageLibraryMangaData>? mangaEntries = new();

    private bool _loading;
    private string? kitsuUsername;
    private bool _kitsuUsernameHasError = false;
    private string animeSearch = string.Empty;

    private void UpdateKitsuUserName(ChangeEventArgs e)
    {
        kitsuUsername = e.Value.ToString();
    }

    public async Task Sync()
    {
        if (string.IsNullOrEmpty(kitsuUsername))
        {
            _kitsuUsernameHasError = true;
            return;
        }

        _loading = true;
        var kitsuEntries = await service.GetEntries(kitsuUsername);
        animeEntries = kitsuEntries.Animes;
        mangaEntries = kitsuEntries.Mangas;
        _loading = false;
    }

    public async Task LoadLibrary()
    {
        if (string.IsNullOrEmpty(kitsuUsername))
        {
            _kitsuUsernameHasError = true;
            return;
        }

        _loading = true;
        var kitsuEntries = await service.GetEntries(kitsuUsername);
        animeEntries = kitsuEntries.Animes;
        mangaEntries = kitsuEntries.Mangas;
        _loading = false;
    }

    private bool CallFilterAnime(KitsuPageLibraryAnimeData actualAnime) => FilterAnime(actualAnime, animeSearch);
    private bool FilterAnime(KitsuPageLibraryAnimeData actualAnime, string searchString) 
    {
        return actualAnime.CanonicalTitle.ToLower().Contains(searchString.ToLower());
    } 
}
